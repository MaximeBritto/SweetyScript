-- StockManager.lua
-- G√®re le stock global des ingr√©dients de la boutique et le timer de r√©assort.

local StockManager = {}

-- Developer Product g√©n√©rique pour acheter un ingr√©dient (pack x1)
-- IMPORTANT: mettez ici l'ID r√©el du produit cr√©√© dans Roblox; laissez 0 pour d√©sactiver le prompt.
local BUY_INGREDIENT_1_PRODUCT_ID = 3370711755
StockManager.__index = StockManager

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local RecipeManager do
	local modInst = ReplicatedStorage:FindFirstChild("RecipeManager")
	local ok, mod = false, nil
	if modInst and modInst:IsA("ModuleScript") then
		ok, mod = pcall(require, modInst)
	end
	if ok and type(mod) == "table" then
		RecipeManager = mod
	else
		warn("[StockManager] RecipeManager introuvable au d√©marrage ‚Äì fallback tables vides (environnement Studio/lint?)")
		RecipeManager = { Ingredients = {}, IngredientOrder = {}, Raretes = {} }
	end
end

-- Developer Product ID pour le restock (configurez-le dans Roblox avec un prix de 30 Robux)
-- IMPORTANT: Remplacez 0 par l'ID r√©el du Developer Product
local RESTOCK_PRODUCT_ID = 3370397152
-- Developer Product ID pour finir instantan√©ment la production (√† configurer)
local FINISH_CRAFT_PRODUCT_ID = 3370397154
-- Developer Product commun pour d√©bloquer les incubateurs 2 et 3 (m√™me code pour l'instant)
local UNLOCK_INCUBATOR_PRODUCT_ID = 3370397155
-- Developer Products pour upgrade marchand en Robux (par niveau)
local MERCHANT_UPGRADE_PRODUCT_IDS = {
	[1] = 3370397156, -- Niveau 1‚Üí2: 50 Robux (configure ce produit √† 50R$ dans Studio)
	[2] = 3370693193, -- Niveau 2‚Üí3: 100 Robux (cr√©e ce produit √† 100R$)
	[3] = 3370711752, -- Niveau 3‚Üí4: 200 Robux (cr√©e ce produit √† 200R$)
	[4] = 3370711753, -- Niveau 4‚Üí5: 400 Robux (cr√©e ce produit √† 400R$)
}

-- Developer Products par raret√© pour achat d'ingr√©dients
-- Cl√©s conformes √† _normalizeRarete: "Commune", "Rare", "√âpique", "L√©gendaire", "Mythique"
local INGREDIENT_PRODUCT_ID_BY_RARETE = {
	["Commune"] = 3370711755,
	["Rare"] = 3370855431,
	["√âpique"] = 3370855432,
	["L√©gendaire"] = 3370855433,
	["Mythique"] = 3370855440,
}

-- Developer Products par taille pour valider une taille de recette dans le Pok√©dex
-- IMPORTANT: Renseignez ici les IDs r√©els des Developer Products (1 par taille)
-- Cl√©s attendues exactement: "Minuscule", "Petit", "Normal", "Grand", "G√©ant", "Colossal", "L√âGENDAIRE"
local POKEDEX_SIZE_PRODUCT_IDS = {
	["Minuscule"] = 3370882287,
	["Petit"] = 3370882286,
	["Normal"] = 3370882285,
	["Grand"] = 3370882284,
	["G√©ant"] = 3370882283,
	["Colossal"] = 3370882282,
	["L√©gendaire"] = 3370882281,
}

-- Developer Products pour l'achat/d√©blocage de plateformes (8 niveaux)
-- IMPORTANT: Remplacez les 0 par vos IDs r√©els de Developer Products, avec des prix croissants
local PLATFORM_PRODUCT_IDS = {
	[1] = 3374849211,
	[2] = 3374849210,
	[3] = 3374849208,
	[4] = 3374849207,
	[5] = 3374849205,
	[6] = 3374849204,
	[7] = 3374849203,
	[8] = 3374849202,
}

local RESTOCK_INTERVAL = 300 -- 5 minutes en secondes

-- Co√ªts Robux pour upgrade marchand (niveau -> prix Robux) - d√©finis c√¥t√© client
local _MERCHANT_UPGRADE_ROBUX_COSTS = {
	[1] = 50,   -- Niveau 1 ‚Üí 2 : 50 Robux
	[2] = 100,  -- Niveau 2 ‚Üí 3 : 100 Robux  
	[3] = 200,  -- Niveau 3 ‚Üí 4 : 200 Robux
	[4] = 400,  -- Niveau 4 ‚Üí 5 : 400 Robux
}
local MAX_MERCHANT_LEVEL = 5

-- üîÑ NOUVEAU: Stock par joueur au lieu de global
local playerStocks = {} -- { [userId] = { [ingredientName] = quantity, lastRestock = timestamp } }

-- üõí Variables de gestion du timer de restock (pour sauvegarde)
local currentRestockTime = RESTOCK_INTERVAL  -- Temps restant actuel
local lastRestockTimestamp = 0               -- Timestamp du dernier restock
local restockTimerRunning = false            -- Indique si le timer tourne d√©j√†
-- plus de limitation de restock par cycle
-- Mapping temporaire: UserId -> incubatorID cibl√© pour "Finir maintenant"
local pendingFinishByUserId = {}
local pendingUnlockByUserId = {}
local finishPromptCooldownByUserId = {}
local restockPromptCooldownByUserId = {}
local upgradePromptCooldownByUserId = {}
-- Mapping pour achat d'ingr√©dient via Robux: UserId -> { name = "Sucre", qty = 1 }
local pendingIngredientByUserId = {}
local ingredientPromptCooldownByUserId = {}
-- Pokedex size purchase state
local pendingPokedexSizeByUserId = {}
local pokedexSizePromptCooldownByUserId = {}
-- Plateformes: √©tat d'achat et anti-spam
local pendingPlatformByUserId = {}
local platformPromptCooldownByUserId = {}

local stockValue = Instance.new("Folder")
stockValue.Name = "ShopStock"
stockValue.Parent = ReplicatedStorage

local restockTimeValue = Instance.new("IntValue")
restockTimeValue.Name = "RestockTime"
restockTimeValue.Parent = stockValue

-- üîÑ Initialiser le stock pour un joueur sp√©cifique
local function initializePlayerStock(userId)
	if playerStocks[userId] then return end -- D√©j√† initialis√©
	
	playerStocks[userId] = {
		lastRestock = os.time()
	}
	
	-- Cr√©er un dossier de stock pour ce joueur dans ReplicatedStorage
	local playerStockFolder = Instance.new("Folder")
	playerStockFolder.Name = "PlayerStock_" .. userId
	playerStockFolder.Parent = ReplicatedStorage
	
	for name, ingredient in pairs(RecipeManager.Ingredients) do
		local rarity = ingredient.rarete or "Common"
		local rarityConfig = RecipeManager.RestockRanges[rarity]
		
		if not rarityConfig then
			warn("üõí [STOCK] Configuration manquante pour la raret√©:", rarity, "- utilisation de Common")
			rarityConfig = RecipeManager.RestockRanges["Common"]
		end
		
		local minQty = rarityConfig.minQuantity
		local maxQty = rarityConfig.maxQuantity
		
		-- G√©n√©rer une quantit√© al√©atoire pour l'initialisation
		local randomValue = math.random()
		local targetQuantity
		
		if randomValue <= rarityConfig.highQuantityChance then
			-- Quantit√© proche du maximum
			local range = maxQty - minQty
			local variation = math.random(0, math.floor(range * 0.3))
			targetQuantity = maxQty - variation
		else
			-- Quantit√© proche du minimum
			local range = maxQty - minQty
			local variation = math.random(0, math.floor(range * 0.3))
			targetQuantity = minQty + variation
		end
		
		-- S'assurer que la quantit√© est dans les limites
		targetQuantity = math.max(minQty, math.min(maxQty, targetQuantity))
		
		-- Garantir minimum 3 pour les ingr√©dients essentiels (Sucre et Gelatine)
		if name == "Sucre" or name == "Gelatine" then
			targetQuantity = math.max(3, targetQuantity)
		end
		
		playerStocks[userId][name] = targetQuantity
		
		-- Cr√©er un IntValue pour cet ingr√©dient
		local stockValue = Instance.new("IntValue")
		stockValue.Name = name
		stockValue.Value = targetQuantity
		stockValue.Parent = playerStockFolder
	end
	
	print("üõí [STOCK] Stock initialis√© pour le joueur:", userId)
end

-- üîÑ Obtenir le stock d'un joueur (avec fallback pour compatibilit√©)
function StockManager.getIngredientStock(ingredientName, player)
	-- Si player fourni, utiliser son stock personnel
	if player then
		local userId = type(player) == "number" and player or player.UserId
		if not playerStocks[userId] then
			initializePlayerStock(userId)
		end
		return playerStocks[userId][ingredientName] or 0
	end
	
	-- Fallback: retourner 0 si pas de joueur sp√©cifi√©
	return 0
end

-- üîÑ D√©cr√©menter le stock d'un joueur
function StockManager.decrementIngredientStock(ingredientName, quantity, player)
	if not player then return end
	
	local userId = type(player) == "number" and player or player.UserId
	if not playerStocks[userId] then
		initializePlayerStock(userId)
	end
	
	local currentStock = playerStocks[userId][ingredientName] or 0
	local newStock = math.max(0, currentStock - (quantity or 1))
	playerStocks[userId][ingredientName] = newStock
	
	-- ÔøΩ Notifier le  client du changement de stock
	local playerObj = type(player) == "number" and Players:GetPlayerByUserId(player) or player
	if playerObj and playerObj.Parent then
		local updateEvent = ReplicatedStorage:FindFirstChild("UpdatePlayerStock")
		if updateEvent then
			updateEvent:FireClient(playerObj, ingredientName, newStock)
		end
	end
end

-- üîÑ Restock pour un joueur sp√©cifique
local function restockPlayerShop(userId)
	if not playerStocks[userId] then
		initializePlayerStock(userId)
		return
	end
	
	print("üõí [STOCK] R√©assort de la boutique pour le joueur:", userId)
	
	for name, ingredient in pairs(RecipeManager.Ingredients) do
		local rarity = ingredient.rarete or "Common"
		local rarityConfig = RecipeManager.RestockRanges[rarity]
		
		if not rarityConfig then
			warn("üõí [STOCK] Configuration manquante pour la raret√©:", rarity, "- utilisation de Common")
			rarityConfig = RecipeManager.RestockRanges["Common"]
		end
		
		local minQty = rarityConfig.minQuantity
		local maxQty = rarityConfig.maxQuantity
		
		-- D√©terminer si on va vers le haut ou le bas
		local randomValue = math.random()
		local targetQuantity
		
		if randomValue <= rarityConfig.highQuantityChance then
			-- Quantit√© proche du maximum
			local range = maxQty - minQty
			local variation = math.random(0, math.floor(range * 0.3))
			targetQuantity = maxQty - variation
		else
			-- Quantit√© proche du minimum
			local range = maxQty - minQty
			local variation = math.random(0, math.floor(range * 0.3))
			targetQuantity = minQty + variation
		end
		
		-- S'assurer que la quantit√© est dans les limites
		targetQuantity = math.max(minQty, math.min(maxQty, targetQuantity))
		
		-- Garantir minimum 3 pour les ingr√©dients essentiels (Sucre et Gelatine)
		if name == "Sucre" or name == "Gelatine" then
			targetQuantity = math.max(3, targetQuantity)
		end
		
		playerStocks[userId][name] = targetQuantity
	end
	
	playerStocks[userId].lastRestock = os.time()
	print("üõí [STOCK] Restock termin√© pour le joueur:", userId)
	
	-- üîÑ Notifier le client de tous les changements de stock
	local playerObj = Players:GetPlayerByUserId(userId)
	if playerObj and playerObj.Parent then
		local updateEvent = ReplicatedStorage:FindFirstChild("UpdatePlayerStock")
		if updateEvent then
			for name, qty in pairs(playerStocks[userId]) do
				if name ~= "lastRestock" then
					updateEvent:FireClient(playerObj, name, qty)
				end
			end
		end
	end
end

-- üîÑ Restock global (tous les joueurs)
function StockManager.restock()
	print("üõí [STOCK] R√©assort global de toutes les boutiques !")
	
	-- Restock pour tous les joueurs connect√©s
	for _, player in ipairs(Players:GetPlayers()) do
		restockPlayerShop(player.UserId)
		
		-- üí∞ SAFETY NET: Garantir minimum 30$ pour chaque joueur
		local playerData = player:FindFirstChild("PlayerData")
		if playerData then
			local argentValue = playerData:FindFirstChild("Argent")
			if argentValue and argentValue.Value < 30 then
				local oldMoney = argentValue.Value
				argentValue.Value = 30
				print("üí∞ [SAFETY] Joueur", player.Name, "avait", oldMoney, "$ ‚Üí recharg√© √† 30$")
			end
		end
	end
	
	-- Mettre √† jour le timestamp du dernier restock
	lastRestockTimestamp = os.time()
	currentRestockTime = RESTOCK_INTERVAL
	print("üõí [STOCK] Prochain restock dans", RESTOCK_INTERVAL, "secondes")
end

-- üõí R√©f√©rence √† la coroutine du timer pour pouvoir l'arr√™ter
local restockTimerThread = nil

-- üõí Fonction pour d√©marrer la boucle de restock avec un temps personnalis√©
local function startRestockTimer(startTime, forceRestart)
	if restockTimerRunning and not forceRestart then
		warn("üõí [STOCK] Timer de restock d√©j√† en cours, ignor√© (utilisez forceRestart=true pour forcer)")
		return
	end
	
	-- Arr√™ter l'ancien timer s'il existe
	if restockTimerThread then
		pcall(function()
			task.cancel(restockTimerThread)
		end)
		restockTimerThread = nil
		print("üõí [STOCK] Ancien timer de restock arr√™t√©")
	end
	
	restockTimerRunning = true
	currentRestockTime = startTime or RESTOCK_INTERVAL
	
	restockTimerThread = task.spawn(function()
		print("üõí [STOCK] Timer de restock d√©marr√© √†", currentRestockTime, "secondes")
		while true do
			for i = currentRestockTime, 1, -1 do
				currentRestockTime = i
				restockTimeValue.Value = i
				task.wait(1)
			end
			StockManager.restock()
			currentRestockTime = RESTOCK_INTERVAL
		end
	end)
end

-- Boucle de r√©assort (uniquement c√¥t√© serveur)
if game:GetService("RunService"):IsServer() then
	-- üîÑ Initialiser le stock pour chaque joueur √† la connexion
	Players.PlayerAdded:Connect(function(player)
		initializePlayerStock(player.UserId)
	end)
	
	-- üîÑ Nettoyer le stock √† la d√©connexion (optionnel, √©conomise la m√©moire)
	Players.PlayerRemoving:Connect(function(player)
		-- On peut garder le stock en m√©moire pour un temps ou le supprimer imm√©diatement
		-- Pour l'instant, on le garde pour permettre la reconnexion rapide
		-- playerStocks[player.UserId] = nil
	end)
	
	-- Initialiser le stock pour les joueurs d√©j√† connect√©s
	for _, player in ipairs(Players:GetPlayers()) do
		initializePlayerStock(player.UserId)
	end
	
	-- D√©marrer le timer (sera √©cras√© par la restauration si n√©cessaire)
	startRestockTimer(RESTOCK_INTERVAL)

	-- üîÑ RemoteFunction pour que le client r√©cup√®re son stock personnel
	local getPlayerStockFunc = Instance.new("RemoteFunction")
	getPlayerStockFunc.Name = "GetPlayerStock"
	getPlayerStockFunc.Parent = ReplicatedStorage
	
	getPlayerStockFunc.OnServerInvoke = function(player)
		local userId = player.UserId
		if not playerStocks[userId] then
			initializePlayerStock(userId)
		end
		-- Retourner une copie du stock (sans lastRestock)
		local stockCopy = {}
		for name, qty in pairs(playerStocks[userId]) do
			if name ~= "lastRestock" then
				stockCopy[name] = qty
			end
		end
		return stockCopy
	end
	
	-- üîÑ RemoteEvent pour notifier le client des changements de stock
	local updateStockEvent = Instance.new("RemoteEvent")
	updateStockEvent.Name = "UpdatePlayerStock"
	updateStockEvent.Parent = ReplicatedStorage

	-- Remote event pour le r√©assort forc√© (ex: via Robux)
	local forceRestockEvent = Instance.new("RemoteEvent")
	forceRestockEvent.Name = "ForceRestockEvent"
	forceRestockEvent.Parent = ReplicatedStorage

	forceRestockEvent.OnServerEvent:Connect(function(player)
		-- Ouvre le prompt d'achat Robux (Developer Product) pour restocker
		if RESTOCK_PRODUCT_ID == 0 then
			warn("[RESTOCK] RESTOCK_PRODUCT_ID non configur√©. Veuillez renseigner l'ID du produit.")
			return
		end
		-- Anti-spam l√©ger pour √©viter doubles prompts
		local now = os.clock()
		local last = restockPromptCooldownByUserId[player.UserId] or 0
		if now - last < 1.5 then return end
		restockPromptCooldownByUserId[player.UserId] = now
		local ok, err = pcall(function()
			MarketplaceService:PromptProductPurchase(player, RESTOCK_PRODUCT_ID)
		end)
		if not ok then
			warn("[RESTOCK] Erreur lors de l'ouverture du prompt d'achat:", err)
			restockPromptCooldownByUserId[player.UserId] = 0
		end
	end)

	-- Remote event: demander la fin imm√©diate d'une production d'incubateur
	local requestFinishEvt = Instance.new("RemoteEvent")
	requestFinishEvt.Name = "RequestFinishCrafting"
	requestFinishEvt.Parent = ReplicatedStorage

	-- Remote event: notification d'achat r√©ussi pour FINIR (fermeture UI c√¥t√© client)
	local finishPurchasedEvt = ReplicatedStorage:FindFirstChild("FinishCraftingPurchased")
	if not finishPurchasedEvt then
		finishPurchasedEvt = Instance.new("RemoteEvent")
		finishPurchasedEvt.Name = "FinishCraftingPurchased"
		finishPurchasedEvt.Parent = ReplicatedStorage
	end

	-- Remote event: notification d'achat r√©ussi pour UNLOCK (fermeture UI c√¥t√© client)
	local unlockPurchasedEvt = ReplicatedStorage:FindFirstChild("UnlockIncubatorPurchased")
	if not unlockPurchasedEvt then
		unlockPurchasedEvt = Instance.new("RemoteEvent")
		unlockPurchasedEvt.Name = "UnlockIncubatorPurchased"
		unlockPurchasedEvt.Parent = ReplicatedStorage
	end

	-- Remote event: demande de d√©blocage d'un incubateur avec monnaie ($)
	local requestUnlockMoneyEvt = ReplicatedStorage:FindFirstChild("RequestUnlockIncubatorMoney")
	if not requestUnlockMoneyEvt then
		requestUnlockMoneyEvt = Instance.new("RemoteEvent")
		requestUnlockMoneyEvt.Name = "RequestUnlockIncubatorMoney"
		requestUnlockMoneyEvt.Parent = ReplicatedStorage
	end

	-- Remote event: demande de reset de sauvegarde (wipe)
	local requestResetSaveEvt = ReplicatedStorage:FindFirstChild("RequestResetSave")
	if not requestResetSaveEvt then
		requestResetSaveEvt = Instance.new("RemoteEvent")
		requestResetSaveEvt.Name = "RequestResetSave"
		requestResetSaveEvt.Parent = ReplicatedStorage
	end

	-- Reset total de la sauvegarde du joueur
	requestResetSaveEvt.OnServerEvent:Connect(function(player)
		-- Remettre √† z√©ro le PlayerData en session et d√©clencher une sauvegarde
		local pd = player:FindFirstChild("PlayerData")
		if pd then
			-- Argent
			local argent = pd:FindFirstChild("Argent"); if argent then argent.Value = 0 end
			-- D√©blocages
			local iu = pd:FindFirstChild("IncubatorsUnlocked"); if iu then iu.Value = 1 end
			local pu = pd:FindFirstChild("PlatformsUnlocked"); if pu then pu.Value = 0 end
			local ml = pd:FindFirstChild("MerchantLevel"); if ml then ml.Value = 1 end
			-- Dossiers √† vider
			for _, name in ipairs({"SacBonbons","RecettesDecouvertes","IngredientsDecouverts","PokedexSizes","ShopUnlocks"}) do
				local f = pd:FindFirstChild(name)
				if f then
					for _, ch in ipairs(f:GetChildren()) do ch:Destroy() end
				end
			end
		end
		-- Sauvegarde via GameManager
		if _G and _G.GameManager and _G.GameManager.sauvegarderJoueur then
			pcall(function()
				_G.GameManager.sauvegarderJoueur(player)
			end)
		end
	end)

	-- Remote event: demande de d√©blocage d'un incubateur (Robux)
	local requestUnlockEvt = ReplicatedStorage:FindFirstChild("RequestUnlockIncubator")
	if not requestUnlockEvt then
		requestUnlockEvt = Instance.new("RemoteEvent")
		requestUnlockEvt.Name = "RequestUnlockIncubator"
		requestUnlockEvt.Parent = ReplicatedStorage
	end

	-- Remote event: demande d'upgrade marchand (Robux)
	local requestUpgradeRobuxEvt = ReplicatedStorage:FindFirstChild("RequestMerchantUpgradeRobux")
	if not requestUpgradeRobuxEvt then
		requestUpgradeRobuxEvt = Instance.new("RemoteEvent")
		requestUpgradeRobuxEvt.Name = "RequestMerchantUpgradeRobux"
		requestUpgradeRobuxEvt.Parent = ReplicatedStorage
	end

	-- Remote event: demande d'achat d'un ingr√©dient via Robux (pack x1)
	local requestIngredientRobuxEvt = ReplicatedStorage:FindFirstChild("RequestIngredientPurchaseRobux")
	if not requestIngredientRobuxEvt then
		requestIngredientRobuxEvt = Instance.new("RemoteEvent")
		requestIngredientRobuxEvt.Name = "RequestIngredientPurchaseRobux"
		requestIngredientRobuxEvt.Parent = ReplicatedStorage
	end

	-- Remote event: demande de validation d'une taille de recette Pok√©dex (Robux)
	local requestPokedexSizeEvt = ReplicatedStorage:FindFirstChild("RequestPokedexSizePurchaseRobux")
	if not requestPokedexSizeEvt then
		requestPokedexSizeEvt = Instance.new("RemoteEvent")
		requestPokedexSizeEvt.Name = "RequestPokedexSizePurchaseRobux"
		requestPokedexSizeEvt.Parent = ReplicatedStorage
	end

	-- Remote event: demande d'achat de plateforme (Robux)
	local requestPlatformRobuxEvt = ReplicatedStorage:FindFirstChild("RequestPlatformPurchaseRobux")
	if not requestPlatformRobuxEvt then
		requestPlatformRobuxEvt = Instance.new("RemoteEvent")
		requestPlatformRobuxEvt.Name = "RequestPlatformPurchaseRobux"
		requestPlatformRobuxEvt.Parent = ReplicatedStorage
	end

	-- Remote event: demande d'achat/d√©blocage de plateforme avec fallback auto (monnaie -> Robux)
	local requestPlatformAutoEvt = ReplicatedStorage:FindFirstChild("RequestPlatformUnlockAuto")
	if not requestPlatformAutoEvt then
		requestPlatformAutoEvt = Instance.new("RemoteEvent")
		requestPlatformAutoEvt.Name = "RequestPlatformUnlockAuto"
		requestPlatformAutoEvt.Parent = ReplicatedStorage
	end

	-- Remote event: notification d'achat de plateforme r√©ussi (fermeture/refresh UI c√¥t√© client)
	local platformPurchasedEvt = ReplicatedStorage:FindFirstChild("PlatformPurchaseGranted")
	if not platformPurchasedEvt then
		platformPurchasedEvt = Instance.new("RemoteEvent")
		platformPurchasedEvt.Name = "PlatformPurchaseGranted"
		platformPurchasedEvt.Parent = ReplicatedStorage
	end

	-- Helper: normaliser les accents pour raret√©
	local function _normalizeRarete(s)
		if type(s) ~= "string" then return "Commune" end
		s = s:gsub("√â","e"):gsub("√©","e"):gsub("√à","e"):gsub("√®","e"):gsub("√ä","e"):gsub("√™","e")
		s = s:gsub("√Ä","a"):gsub("√Ç","a"):gsub("√Ñ","a"):gsub("√†","a"):gsub("√¢","a"):gsub("√§","a")
		s = s:gsub("√è","i"):gsub("√Æ","i"):gsub("√Ø","i")
		s = s:gsub("√î","o"):gsub("√¥","o")
		s = s:gsub("√ô","u"):gsub("√õ","u"):gsub("√ú","u"):gsub("√π","u"):gsub("√ª","u"):gsub("√º","u")
		s = string.lower(s)
		if string.find(s, "commune", 1, true) then return "Commune" end
		if string.find(s, "rare", 1, true) then return "Rare" end
		if string.find(s, "epique", 1, true) then return "√âpique" end
		if string.find(s, "legendaire", 1, true) then return "L√©gendaire" end
		if string.find(s, "mythique", 1, true) then return "Mythique" end
		return "Commune"
	end

	local function _isIngredientAllowedForPlayer(player, ingredientName)
		local def = RecipeManager and RecipeManager.Ingredients and RecipeManager.Ingredients[ingredientName]
		if not def then return false end
		local pd = player:FindFirstChild("PlayerData")
		local ml = pd and pd:FindFirstChild("MerchantLevel") and pd.MerchantLevel.Value or 1
		local order = 1
		if RecipeManager.Raretes and def.rarete then
			local key = _normalizeRarete(def.rarete)
			local info = RecipeManager.Raretes[key]
			if info and info.ordre then order = info.ordre end
		end
		return order <= math.clamp(ml, 1, MAX_MERCHANT_LEVEL)
	end

	local function _isIngredientProductId(pid)
		for _, v in pairs(INGREDIENT_PRODUCT_ID_BY_RARETE) do
			if v == pid then return true end
		end
		-- compat: ancien produit unique
		return pid == BUY_INGREDIENT_1_PRODUCT_ID
	end

	local function _isPokedexSizeProductId(pid)
		for _, v in pairs(POKEDEX_SIZE_PRODUCT_IDS) do
			if v == pid and v ~= 0 then return true end
		end
		return false
	end

	local function _isPlatformProductId(pid)
		for _, v in pairs(PLATFORM_PRODUCT_IDS) do
			if v == pid and v ~= 0 then return true end
		end
		return false
	end

	-- (removed duplicate _normalizeSizeKey definition; see hardened version below)

	local function _normalizeSizeKey(label)
		-- Accept exact keys as-is if they exist in the product table
		local rawLabel = tostring(label or "")
		if POKEDEX_SIZE_PRODUCT_IDS and POKEDEX_SIZE_PRODUCT_IDS[rawLabel] ~= nil then
			return rawLabel
		end
		-- Accept full labels or mobile abbreviations
		local map = {
			["M"] = "Minuscule",
			["P"] = "Petit",
			["N"] = "Normal",
			["G"] = "Grand",
			["G+"] = "G√©ant",
			["C"] = "Colossal",
			["L"] = "L√âGENDAIRE",
		}
		-- Trim whitespace and tolerate a trailing hyphen/colon (e.g. "L -")
		local trimmed = (rawLabel:match("^%s*(.-)%s*$")) or ""
		-- Remove common invisible spaces (NBSP, ZWSP, ZWNJ, ZWJ, BOM)
		trimmed = trimmed
			:gsub("\194\160", " ") -- NBSP ‚Üí space
			:gsub("\226\128[\139-\141]", "") -- U+200B..U+200D
			:gsub("\239\187\191", "") -- BOM
		local noTrail = trimmed:gsub("%s*[-‚Äì‚Äî:]+%s*$", "")
		-- Direct match on full labels (handles proper accents and common variants)
		local fullMap = {
			["Minuscule"] = "Minuscule",
			["Petit"] = "Petit",
			["Normal"] = "Normal",
			["Grand"] = "Grand",
			["G√©ant"] = "G√©ant", ["Geant"] = "G√©ant",
			["Colossal"] = "Colossal",
			["L√©gendaire"] = "L√©gendaire"
		}
		if fullMap[noTrail] then return fullMap[noTrail] end
		-- Check abbreviations first (tolerate case)
		if map[noTrail] then return map[noTrail] end
		local upTok = string.upper(noTrail)
		if map[upTok] then return map[upTok] end
		-- Normalize full labels: drop spaces/hyphens/underscores and strip accents (both cases)
		local s = noTrail
		s = s:gsub("%s+", ""):gsub("[%-%_]", "")
		-- Remove same invisible spaces inside token
		s = s
			:gsub("\194\160", "")
			:gsub("\226\128[\139-\141]", "")
			:gsub("\239\187\191", "")
		s = s
			:gsub("[√Ä√Å√Ç√É√Ñ√Ö√†√°√¢√£√§√•]", "a")
			:gsub("[√á√ß]", "c")
			:gsub("[√à√â√ä√ã√®√©√™√´]", "e")
			:gsub("[√å√ç√é√è√¨√≠√Æ√Ø]", "i")
			:gsub("[√ë√±]", "n")
			:gsub("[√í√ì√î√ï√ñ√≤√≥√¥√µ√∂]", "o")
			:gsub("[√ô√ö√õ√ú√π√∫√ª√º]", "u")
			:gsub("[√ù≈∏√Ω√ø]", "y")
		-- Remove UTF-8 combining diacritics (U+0300..U+036F), e.g. e +  ÃÅ
		s = s:gsub("\204[\128-\191]", ""):gsub("\205[\128-\175]", "")
		local lower = s:lower()
		if lower == "minuscule" then return "Minuscule" end
		if lower == "petit" then return "Petit" end
		if lower == "normal" then return "Normal" end
		if lower == "grand" then return "Grand" end
		if lower == "geant" then return "G√©ant" end
		if lower == "colossal" then return "Colossal" end
		if lower == "legendaire"  then return "L√©gendaire" end
		return nil
	end

	requestIngredientRobuxEvt.OnServerEvent:Connect(function(player, ingredientName, qty)
		qty = tonumber(qty) or 1
		if qty < 1 then qty = 1 end
		-- V√©rifs basiques
		if type(ingredientName) ~= "string" then return end
		local def = RecipeManager.Ingredients[ingredientName]
		if not def then
			warn("[ING R$] Ingr√©dient inconnu:", tostring(ingredientName))
			return
		end
		if not _isIngredientAllowedForPlayer(player, ingredientName) then
			warn("[ING R$] Refus√©: niveau marchand insuffisant pour", player.Name, ingredientName)
			return
		end
		-- üîß V√©rifier le stock PERSONNEL du joueur
		local available = StockManager.getIngredientStock(ingredientName, player)
		print("üîç [ING R$] Stock personnel de", player.Name, "pour", ingredientName, ":", available)
		if available <= 0 then
			warn("[ING R$] Rupture de stock personnel pour", player.Name, "-", ingredientName)
			return
		end
		local rarityKey = _normalizeRarete(def.rarete)
		local productId = INGREDIENT_PRODUCT_ID_BY_RARETE[rarityKey]
		if not productId or productId == 0 then
			warn("[ING R$] Aucun Developer Product configur√© pour la raret√©:", rarityKey, "(", tostring(ingredientName), ")")
			return
		end
		
		-- üß™ MODE TEST STUDIO: Simuler l'achat directement sans Robux
		if RunService:IsStudio() then
			print("üß™ [TEST] Mode Studio d√©tect√© - Simulation achat Robux pour", player.Name)
			-- Simuler le ProcessReceipt directement
			task.delay(0.5, function()
				local receiptInfo = {
					PlayerId = player.UserId,
					ProductId = productId
				}
				-- Appeler directement la logique de ProcessReceipt
				pendingIngredientByUserId[player.UserId] = { name = ingredientName, qty = 1, productId = productId }
				
				-- Simuler le traitement
				local bp = player:FindFirstChildOfClass("Backpack")
				if bp then
					local ingFolder = ReplicatedStorage:FindFirstChild("IngredientTools")
					local tpl = ingFolder and ingFolder:FindFirstChild(ingredientName)
					
					local tool
					for _, t in ipairs(bp:GetChildren()) do
						if t:IsA("Tool") and t:GetAttribute("BaseName") == ingredientName then
							tool = t
							break
						end
					end
					
					if tool then
						local cnt = tool:FindFirstChild("Count")
						if not cnt then
							cnt = Instance.new("IntValue")
							cnt.Name = "Count"
							cnt.Parent = tool
						end
						cnt.Value = (cnt.Value or 0) + 1
						print("‚úÖ [TEST] Ajout√© au stack existant:", ingredientName, "- Nouveau count:", cnt.Value)
					else
						if tpl then
							local clone = tpl:Clone()
							clone:SetAttribute("BaseName", ingredientName)
							local cnt = clone:FindFirstChild("Count")
							if not cnt then
								cnt = Instance.new("IntValue")
								cnt.Name = "Count"
								cnt.Parent = clone
							end
							cnt.Value = 1
							clone.Parent = bp
							print("‚úÖ [TEST] Nouveau tool cr√©√©:", ingredientName)
						end
					end
					
					-- D√©cr√©menter le stock
					StockManager.decrementIngredientStock(ingredientName, 1, player)
					print("‚úÖ [TEST] Achat Robux simul√© avec succ√®s pour", player.Name, "-", ingredientName)
				end
				
				pendingIngredientByUserId[player.UserId] = nil
			end)
			return
		end
		
		-- Mode production: utiliser le vrai syst√®me Robux
		-- Anti-spam 1.5s
		local now = os.clock()
		local last = ingredientPromptCooldownByUserId[player.UserId] or 0
		if now - last < 1.5 then return end
		ingredientPromptCooldownByUserId[player.UserId] = now

		pendingIngredientByUserId[player.UserId] = { name = ingredientName, qty = 1, productId = productId }
		local ok, err = pcall(function()
			MarketplaceService:PromptProductPurchase(player, productId)
		end)
		if not ok then
			warn("[ING R$] Erreur PromptProductPurchase:", err)
			pendingIngredientByUserId[player.UserId] = nil
		end
	end)

	-- Demande d'achat Robux pour une taille Pok√©dex
	requestPokedexSizeEvt.OnServerEvent:Connect(function(player, recipeName, sizeLabel)
		if type(recipeName) ~= "string" or type(sizeLabel) ~= "string" then return end
		local recs = RecipeManager and RecipeManager.Recettes
		if not recs or not recs[recipeName] then
			warn("[DEX SIZE R$] Recette inconnue:", tostring(recipeName))
			return
		end
		local sizeKey = _normalizeSizeKey(sizeLabel) or _normalizeSizeKey(tostring(sizeLabel))
		if not sizeKey then
			local rx = tostring(sizeLabel)
			local bytes = {}
			for i = 1, #rx do bytes[#bytes+1] = string.byte(rx, i) end
			warn("[DEX SIZE R$] Taille inconnue:", rx, " bytes:", table.concat(bytes, ","))
			return
		end
		local productId = POKEDEX_SIZE_PRODUCT_IDS[sizeKey]
		if not productId or productId == 0 then
			warn("[DEX SIZE R$] Aucun ProductId configur√© pour la taille:", sizeKey)
			return
		end
		-- D√©j√† valid√© ?
		local pd = player:FindFirstChild("PlayerData")
		local sizesRoot = pd and pd:FindFirstChild("PokedexSizes")
		local rf = sizesRoot and sizesRoot:FindFirstChild(recipeName)
		if rf then
			local flag = rf:FindFirstChild(sizeKey)
			if flag and flag:IsA("BoolValue") and flag.Value == true then
				warn("[DEX SIZE R$] Taille d√©j√† valid√©e pour", player.Name, recipeName, sizeKey)
				return
			end
		end
		-- Anti-spam l√©ger
		local now = os.clock()
		local last = pokedexSizePromptCooldownByUserId[player.UserId] or 0
		if now - last < 1.5 then return end
		pokedexSizePromptCooldownByUserId[player.UserId] = now

		pendingPokedexSizeByUserId[player.UserId] = { recipe = recipeName, sizeKey = sizeKey, productId = productId }
		local ok, err = pcall(function()
			MarketplaceService:PromptProductPurchase(player, productId)
		end)
		if not ok then
			warn("[DEX SIZE R$] Erreur PromptProductPurchase:", err)
			pendingPokedexSizeByUserId[player.UserId] = nil
		end
	end)

	-- Demande d'achat Robux pour une plateforme (niveau 1..8)
	requestPlatformRobuxEvt.OnServerEvent:Connect(function(player, platformLevel)
		local lvl = tonumber(platformLevel)
		if not lvl or lvl < 1 or lvl > 8 then
			warn("[PLATFORM R$] Niveau de plateforme invalide:", tostring(platformLevel))
			return
		end
		local productId = PLATFORM_PRODUCT_IDS[lvl]
		if not productId or productId == 0 then
			warn("[PLATFORM R$] Aucun ProductId configur√© pour le niveau:", lvl)
			return
		end
		-- Anti-spam 1.5s
		local now = os.clock()
		local last = platformPromptCooldownByUserId[player.UserId] or 0
		if now - last < 1.5 then return end
		platformPromptCooldownByUserId[player.UserId] = now

		pendingPlatformByUserId[player.UserId] = { level = lvl, productId = productId }
		local ok, err = pcall(function()
			MarketplaceService:PromptProductPurchase(player, productId)
		end)
		if not ok then
			warn("[PLATFORM R$] Erreur PromptProductPurchase:", err)
			pendingPlatformByUserId[player.UserId] = nil
		end
	end)

	-- Demande d'achat/d√©blocage AUTO: tente monnaie in-game, sinon prompt Robux
	requestPlatformAutoEvt.OnServerEvent:Connect(function(player, platformLevel)
		local lvl = tonumber(platformLevel)
		if not lvl or lvl < 1 or lvl > 8 then
			warn("[PLATFORM AUTO] Niveau de plateforme invalide:", tostring(platformLevel))
			return
		end

		-- Tente achat via monnaie in-game si hook dispo
		local purchasedWithCurrency = false
		local hasHook = _G and type(_G.TryPurchasePlatformWithCurrency) == "function"
		if hasHook then
			local okHook, res = pcall(_G.TryPurchasePlatformWithCurrency, player, lvl)
			if not okHook then
				warn("[PLATFORM AUTO] TryPurchasePlatformWithCurrency erreur:", res)
			else
				purchasedWithCurrency = res == true
			end
		end

		if purchasedWithCurrency then
			-- Succ√®s via monnaie: notifier client pour refresh UI
			if platformPurchasedEvt then
				platformPurchasedEvt:FireClient(player, lvl)
			end
			return
		end

		-- Fallback: prompt Robux pour le niveau demand√©
		local productId = PLATFORM_PRODUCT_IDS[lvl]
		if not productId or productId == 0 then
			warn("[PLATFORM AUTO] Aucun ProductId configur√© pour le niveau:", lvl)
			return
		end
		local now = os.clock()
		local last = platformPromptCooldownByUserId[player.UserId] or 0
		if now - last < 1.5 then return end
		platformPromptCooldownByUserId[player.UserId] = now

		pendingPlatformByUserId[player.UserId] = { level = lvl, productId = productId }
		local okPrompt, err2 = pcall(function()
			MarketplaceService:PromptProductPurchase(player, productId)
		end)
		if not okPrompt then
			warn("[PLATFORM AUTO] Erreur PromptProductPurchase:", err2)
			pendingPlatformByUserId[player.UserId] = nil
		end
	end)

	requestUnlockEvt.OnServerEvent:Connect(function(player, incubatorIndex)
		if UNLOCK_INCUBATOR_PRODUCT_ID == 0 then
			warn("[UNLOCK INCUBATOR] ProductId non configur√©")
			return
		end
		local idx = tonumber(incubatorIndex)
		if idx ~= 2 and idx ~= 3 then
			warn("[UNLOCK INCUBATOR] Index demand√© invalide:", incubatorIndex)
			return
		end
		pendingUnlockByUserId[player.UserId] = idx
		local ok, err = pcall(function()
			MarketplaceService:PromptProductPurchase(player, UNLOCK_INCUBATOR_PRODUCT_ID)
		end)
		if not ok then
			warn("[UNLOCK INCUBATOR] Erreur prompt:", err)
			pendingUnlockByUserId[player.UserId] = nil
		end
	end)

	-- D√©blocage incubateur via monnaie in-game
	requestUnlockMoneyEvt.OnServerEvent:Connect(function(player, incubatorIndex)
		local idx = tonumber(incubatorIndex)
		if idx ~= 2 and idx ~= 3 then
			warn("[UNLOCK $] Index invalide:", incubatorIndex)
			return
		end
		local pd = player:FindFirstChild("PlayerData")
		local iu = pd and pd:FindFirstChild("IncubatorsUnlocked")
		local argent = pd and pd:FindFirstChild("Argent")
		if not (iu and argent) then
			warn("[UNLOCK $] PlayerData/valeurs manquants pour", player.Name)
			return
		end
		-- Co√ªts: 2 ‚Üí 100,000,000,000 ; 3 ‚Üí 1,000,000,000,000 (comme l'UI)
		local cost = (idx == 2) and 100000000000 or 1000000000000
		if argent.Value < cost then
			warn("[UNLOCK $] Fonds insuffisants pour", player.Name, "n√©cessite:", cost)
			return
		end
		-- D√©biter et d√©bloquer
		argent.Value -= cost
		iu.Value = math.max(iu.Value, idx)
		print("‚úÖ Incubateur", idx, "d√©bloqu√© via monnaie pour", player.Name)
		-- Notifier le client pour fermer/refresh UI
		if unlockPurchasedEvt then unlockPurchasedEvt:FireClient(player, idx) end
	end)

	requestUpgradeRobuxEvt.OnServerEvent:Connect(function(player)
		local pd = player:FindFirstChild("PlayerData")
		if not pd then
			warn("[MERCHANT UPGRADE] PlayerData manquant pour", player.Name)
			return
		end

		local ml = pd:FindFirstChild("MerchantLevel")
		if not ml then
			warn("[MERCHANT UPGRADE] MerchantLevel manquant pour", player.Name)
			return
		end

		local currentLevel = ml.Value
		if currentLevel >= MAX_MERCHANT_LEVEL then
			warn("[MERCHANT UPGRADE] Joueur", player.Name, "est d√©j√† au niveau max")
			return
		end

		-- R√©cup√©rer le Product ID correspondant au niveau actuel
		local productId = MERCHANT_UPGRADE_PRODUCT_IDS[currentLevel]
		if not productId then
			warn("[MERCHANT UPGRADE] Aucun Product ID pour le niveau", currentLevel)
			return
		end

		-- Anti-spam: 1.5s entre deux prompts max
		local now = os.clock()
		local last = upgradePromptCooldownByUserId[player.UserId] or 0
		if now - last < 1.5 then return end
		upgradePromptCooldownByUserId[player.UserId] = now

		print("üéØ [MERCHANT UPGRADE] Niveau", currentLevel, "‚Üí Product ID:", productId)
		local ok, err = pcall(function()
			MarketplaceService:PromptProductPurchase(player, productId)
		end)
		if not ok then
			warn("[MERCHANT UPGRADE] Erreur lors de l'ouverture du prompt:", err)
			upgradePromptCooldownByUserId[player.UserId] = 0
		end
	end)

	requestFinishEvt.OnServerEvent:Connect(function(player, incubatorID)
		if FINISH_CRAFT_PRODUCT_ID == 0 then
			warn("[INCUBATOR FINISH] FINISH_CRAFT_PRODUCT_ID non configur√©. Veuillez renseigner l'ID du produit.")
			return
		end
		pendingFinishByUserId[player.UserId] = tostring(incubatorID or "")
		-- Anti-spam: 1.5s entre deux prompts max
		local now = os.clock()
		local last = finishPromptCooldownByUserId[player.UserId] or 0
		if now - last < 1.5 then return end
		finishPromptCooldownByUserId[player.UserId] = now
		local ok, err = pcall(function()
			MarketplaceService:PromptProductPurchase(player, FINISH_CRAFT_PRODUCT_ID)
		end)
		if not ok then
			warn("[INCUBATOR FINISH] Erreur lors de l'ouverture du prompt:", err)
			-- reset cooldown on error
			finishPromptCooldownByUserId[player.UserId] = 0
		end
	end)

	-- R√©initialiser le flag lorsque le prompt est ferm√©
	MarketplaceService.PromptProductPurchaseFinished:Connect(function(player, productId, wasPurchased)
		if productId == RESTOCK_PRODUCT_ID then
			-- rien √† faire c√¥t√© attribut d√©sormais
		elseif productId == FINISH_CRAFT_PRODUCT_ID then
			-- Si non achet√©, on lib√®re l'√©tat en attente pour permettre un nouveau clic
			if not wasPurchased then
				pendingFinishByUserId[player.UserId] = nil
			end
			-- La fermeture UI sera d√©clench√©e apr√®s ProcessReceipt via FinishCraftingPurchased
		elseif productId == UNLOCK_INCUBATOR_PRODUCT_ID then
			if not wasPurchased then
				pendingUnlockByUserId[player.UserId] = nil
			else
				-- Afficher l'√©cran de production imm√©diatement
				local ev = ReplicatedStorage:FindFirstChild("UnlockIncubatorPurchased")
				if ev and ev:IsA("RemoteEvent") then
					-- Envoyer l'index de l'incubateur d√©bloqu√©
					local targetIdx = pendingUnlockByUserId[player.UserId]
					ev:FireClient(player, targetIdx)
				end
			end
		else
			-- V√©rifier si c'est un des Product IDs d'upgrade marchand
			local isMerchantUpgrade = false
			for level, pid in pairs(MERCHANT_UPGRADE_PRODUCT_IDS) do
				if productId == pid then
					isMerchantUpgrade = true
					break
				end
			end
			if isMerchantUpgrade then
				-- Pas besoin de traitement sp√©cial ici, ProcessReceipt s'en charge
			elseif _isIngredientProductId(productId) then
				-- Si non achet√©, on lib√®re l'√©tat en attente
				if not wasPurchased then
					pendingIngredientByUserId[player.UserId] = nil
				end
			elseif _isPokedexSizeProductId(productId) then
				if not wasPurchased then
					pendingPokedexSizeByUserId[player.UserId] = nil
				end
			elseif _isPlatformProductId(productId) then
				if not wasPurchased then
					pendingPlatformByUserId[player.UserId] = nil
				end
			end
		end
	end)

	-- Traitement du re√ßu d'achat: si le produit correspond, on restock et on accorde l'achat
	MarketplaceService.ProcessReceipt = function(receiptInfo)
		if receiptInfo.ProductId == RESTOCK_PRODUCT_ID then
			local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
			if player then
				print(player.Name .. " a achet√© un Restock (Developer Product). R√©assort de SA boutique‚Ä¶")
				-- üîÑ Restock uniquement pour CE joueur
				restockPlayerShop(receiptInfo.PlayerId)
			else
				warn("[RESTOCK] Joueur introuvable pour le re√ßu")
			end
			return Enum.ProductPurchaseDecision.PurchaseGranted
		elseif receiptInfo.ProductId == FINISH_CRAFT_PRODUCT_ID then
			local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
			local incID = pendingFinishByUserId[receiptInfo.PlayerId]
			if player and incID and _G and typeof(_G.IncubatorFinishNow) == "function" then
				local ok, err = pcall(function()
					_G.IncubatorFinishNow(player, incID)
				end)
				if not ok then
					warn("[INCUBATOR FINISH] Erreur finalisation imm√©diate:", err)
				end
				-- Notifier le client pour qu'il ferme l'UI incubateur
				local ev = ReplicatedStorage:FindFirstChild("FinishCraftingPurchased")
				if ev and ev:IsA("RemoteEvent") then
					ev:FireClient(player, incID)
				end
			else
				if not player then warn("[INCUBATOR FINISH] Joueur introuvable pour le re√ßu") end
				if not incID then warn("[INCUBATOR FINISH] Aucun incubatorID en attente pour ce joueur") end
				if not (_G and typeof(_G.IncubatorFinishNow) == "function") then warn("[INCUBATOR FINISH] _G.IncubatorFinishNow indisponible") end
			end
			pendingFinishByUserId[receiptInfo.PlayerId] = nil
			return Enum.ProductPurchaseDecision.PurchaseGranted
		elseif receiptInfo.ProductId == UNLOCK_INCUBATOR_PRODUCT_ID then
			local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
			local targetIdx = pendingUnlockByUserId[receiptInfo.PlayerId]
			if player and (targetIdx == 2 or targetIdx == 3) then
				local pd = player:FindFirstChild("PlayerData")
				local iu = pd and pd:FindFirstChild("IncubatorsUnlocked")
				if iu then
					iu.Value = math.max(iu.Value, targetIdx)
					print("‚úÖ Incubateur "..tostring(targetIdx).." d√©bloqu√© via Robux pour "..player.Name)
					-- Fermer l'UI incubateur c√¥t√© client (il devra recliquer pour voir le d√©blocage)
					local ev = ReplicatedStorage:FindFirstChild("UnlockIncubatorPurchased")
					if ev and ev:IsA("RemoteEvent") then
						ev:FireClient(player, targetIdx)
					end
				else
					warn("[UNLOCK INCUBATOR] IncubatorsUnlocked absent pour ", player.Name)
				end
			else
				if not player then warn("[UNLOCK INCUBATOR] Joueur introuvable pour le re√ßu") end
				if not (targetIdx == 2 or targetIdx == 3) then warn("[UNLOCK INCUBATOR] Index cible invalide: ", targetIdx) end
			end
			pendingUnlockByUserId[receiptInfo.PlayerId] = nil
			return Enum.ProductPurchaseDecision.PurchaseGranted
		elseif _isIngredientProductId(receiptInfo.ProductId) then
			local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
			if not player then
				warn("[ING R$] Joueur introuvable pour le re√ßu ‚Äì r√©essai ult√©rieur")
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end
			local pending = pendingIngredientByUserId[receiptInfo.PlayerId]
			if not pending or type(pending.name) ~= "string" then
				warn("[ING R$] Aucun achat d'ingr√©dient en attente pour ce joueur")
				-- On accorde quand m√™me pour √©viter les boucles infinies, mais sans stock/objet cela n'a pas de sens.
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end
			if pending.productId and pending.productId ~= receiptInfo.ProductId then
				warn("[ING R$] Mismatch ProductId (attendu=", tostring(pending.productId), ", re√ßu=", tostring(receiptInfo.ProductId), ") ‚Äì poursuite du traitement par s√©curit√©")
			end
			local ingredientName = pending.name
			local qty = tonumber(pending.qty) or 1

			-- S√©curit√© suppl√©mentaire: v√©rifier l'acc√®s par niveau marchand
			if not _isIngredientAllowedForPlayer(player, ingredientName) then
				warn("[ING R$] Achat re√ßu mais niveau marchand insuffisant pour", player.Name, ingredientName)
				pendingIngredientByUserId[receiptInfo.PlayerId] = nil
				return Enum.ProductPurchaseDecision.PurchaseGranted
			end

			-- Ajouter l'ingr√©dient dans le Backpack du joueur (stack Count)
			print("üîç [ING R$] Traitement achat pour:", player.Name, "- Ingr√©dient:", ingredientName, "- Qty:", qty)
			local ingFolder = ReplicatedStorage:FindFirstChild("IngredientTools")
			print("üîç [ING R$] IngredientTools folder:", ingFolder ~= nil)
			local tpl = ingFolder and ingFolder:FindFirstChild(ingredientName)
			print("üîç [ING R$] Template trouv√©:", tpl ~= nil, "- Nom recherch√©:", ingredientName)
			if not tpl then
				warn("[ING R$] Template introuvable pour l'ingr√©dient:", ingredientName, "‚Üí cr√©ation d'un Tool g√©n√©rique")
			end

			local bp = player:FindFirstChildOfClass("Backpack")
			if not bp then
				warn("[ING R$] Backpack introuvable pour", player.Name)
				pendingIngredientByUserId[receiptInfo.PlayerId] = nil
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end

			local tool
			for _, t in ipairs(bp:GetChildren()) do
				if t:IsA("Tool") and t:GetAttribute("BaseName") == ingredientName then
					tool = t
					break
				end
			end
			if tool then
				print("‚úÖ [ING R$] Tool existant trouv√©, ajout au stack")
				local cnt = tool:FindFirstChild("Count")
				if not cnt then
					cnt = Instance.new("IntValue")
					cnt.Name = "Count"
					cnt.Parent = tool
				end
				cnt.Value = (cnt.Value or 0) + qty
				print("‚úÖ [ING R$] Nouveau count:", cnt.Value)
			else
				print("üÜï [ING R$] Cr√©ation nouveau tool")
				local clone
				if tpl then
					clone = tpl:Clone()
				else
					clone = Instance.new("Tool")
					clone.Name = ingredientName
					clone.RequiresHandle = false
				end
				clone:SetAttribute("BaseName", ingredientName)
				local cnt = clone:FindFirstChild("Count")
				if not cnt then
					cnt = Instance.new("IntValue")
					cnt.Name = "Count"
					cnt.Parent = clone
				end
				cnt.Value = qty
				clone.Parent = bp
				print("‚úÖ [ING R$] Tool cr√©√© et ajout√© au backpack")
			end

			-- üîÑ D√©cr√©menter le stock DU JOUEUR (pas global)
			print("üìâ [ING R$] D√©cr√©mentation stock joueur:", ingredientName, "- Qty:", qty)
			StockManager.decrementIngredientStock(ingredientName, qty, player)

			-- Nettoyage et accord
			print("‚úÖ [ING R$] Achat Robux compl√©t√© pour", player.Name, "-", ingredientName, "x" .. qty)
			pendingIngredientByUserId[receiptInfo.PlayerId] = nil
			return Enum.ProductPurchaseDecision.PurchaseGranted
		elseif _isPokedexSizeProductId(receiptInfo.ProductId) then
			local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
			if not player then
				warn("[DEX SIZE R$] Joueur introuvable pour le re√ßu ‚Äì r√©essai ult√©rieur")
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end
			local pending = pendingPokedexSizeByUserId[receiptInfo.PlayerId]
			if not pending or type(pending.recipe) ~= "string" or type(pending.sizeKey) ~= "string" then
				warn("[DEX SIZE R$] Aucun achat de taille en attente pour ce joueur")
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end
			if pending.productId and pending.productId ~= receiptInfo.ProductId then
				warn("[DEX SIZE R$] Mismatch ProductId (attendu=", tostring(pending.productId), ", re√ßu=", tostring(receiptInfo.ProductId), ") ‚Äì poursuite du traitement")
			end
			local pd = player:FindFirstChild("PlayerData")
			if not pd then
				warn("[DEX SIZE R$] PlayerData manquant pour ", player.Name)
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end
			local sizesRoot = pd:FindFirstChild("PokedexSizes")
			if not sizesRoot then
				sizesRoot = Instance.new("Folder")
				sizesRoot.Name = "PokedexSizes"
				sizesRoot.Parent = pd
			end
			local rf = sizesRoot:FindFirstChild(pending.recipe)
			if not rf then
				rf = Instance.new("Folder")
				rf.Name = pending.recipe
				rf.Parent = sizesRoot
			end
			local flag = rf:FindFirstChild(pending.sizeKey)
			if not flag then
				flag = Instance.new("BoolValue")
				flag.Name = pending.sizeKey
				flag.Parent = rf
			end
			flag.Value = true
			print("‚úÖ [Pok√©dex] ", player.Name, " a valid√© ", pending.recipe, " - ", pending.sizeKey, " via Robux")
			pendingPokedexSizeByUserId[receiptInfo.PlayerId] = nil
			return Enum.ProductPurchaseDecision.PurchaseGranted
		elseif _isPlatformProductId(receiptInfo.ProductId) then
			local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
			if not player then
				warn("[PLATFORM R$] Joueur introuvable pour le re√ßu ‚Äì r√©essai ult√©rieur")
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end
			local pending = pendingPlatformByUserId[receiptInfo.PlayerId]
			if not pending or not pending.level then
				warn("[PLATFORM R$] Aucun achat de plateforme en attente pour ce joueur")
				return Enum.ProductPurchaseDecision.NotProcessedYet
			end
			if pending.productId and pending.productId ~= receiptInfo.ProductId then
				warn("[PLATFORM R$] Mismatch ProductId (attendu=", tostring(pending.productId), ", re√ßu=", tostring(receiptInfo.ProductId), ") ‚Äì poursuite du traitement")
			end
			-- Hook serveur: laisser IslandManager/serveur appliquer le d√©blocage
			if _G and typeof(_G.OnPlatformPurchased) == "function" then
				local ok, err = pcall(function()
					_G.OnPlatformPurchased(player, pending.level)
				end)
				if not ok then warn("[PLATFORM R$] Erreur OnPlatformPurchased:", err) end
			end
			-- Notifier le client pour rafra√Æchir l'UI
			local ev = ReplicatedStorage:FindFirstChild("PlatformPurchaseGranted")
			if ev and ev:IsA("RemoteEvent") then
				ev:FireClient(player, pending.level)
			end
			pendingPlatformByUserId[receiptInfo.PlayerId] = nil
			return Enum.ProductPurchaseDecision.PurchaseGranted
		else
			-- V√©rifier si c'est un des Product IDs d'upgrade marchand
			local isMerchantUpgrade = false
			for level, pid in pairs(MERCHANT_UPGRADE_PRODUCT_IDS) do
				if receiptInfo.ProductId == pid then
					isMerchantUpgrade = true
					break
				end
			end
			if isMerchantUpgrade then
				local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
				if not player then 
					warn("[MERCHANT UPGRADE] Joueur non trouv√© pour l'achat")
					return Enum.ProductPurchaseDecision.NotProcessedYet
				end
				local pd = player:FindFirstChild("PlayerData")
				if not pd then
					warn("[MERCHANT UPGRADE] PlayerData manquant")
					return Enum.ProductPurchaseDecision.NotProcessedYet
				end
				local ml = pd:FindFirstChild("MerchantLevel")
				if not ml then
					warn("[MERCHANT UPGRADE] MerchantLevel manquant")
					return Enum.ProductPurchaseDecision.NotProcessedYet
				end
				local currentLevel = ml.Value
				if currentLevel >= MAX_MERCHANT_LEVEL then
					warn("[MERCHANT UPGRADE] Joueur d√©j√† au niveau max")
					return Enum.ProductPurchaseDecision.NotProcessedYet
				end
				local newLevel = math.clamp(currentLevel + 1, 1, MAX_MERCHANT_LEVEL)
				ml.Value = newLevel
				print(" UPGRADE ROBUX r√©ussi pour", player.Name, ":", currentLevel, "‚Üí", newLevel, "(Product:", receiptInfo.ProductId, ")")
				return Enum.ProductPurchaseDecision.PurchaseGranted
			end
			return Enum.ProductPurchaseDecision.NotProcessedYet
		end
	end
end

-- Prompt Robux pour d√©bloquer un incubateur (2 ou 3)
function StockManager.promptUnlockIncubator(player, incubatorIndex)
	if not player or (incubatorIndex ~= 2 and incubatorIndex ~= 3) then return end
	pendingUnlockByUserId[player.UserId] = incubatorIndex
	local ok, err = pcall(function()
		MarketplaceService:PromptProductPurchase(player, UNLOCK_INCUBATOR_PRODUCT_ID)
	end)
	if not ok then warn("[UNLOCK INCUBATOR] Erreur prompt:", err) end
end

-- Prompt Robux direct pour une plateforme (niveau 1..8)
function StockManager.promptPlatformRobux(player, platformLevel)
    if not player then return false end
    local lvl = tonumber(platformLevel)
    if not lvl or lvl < 1 or lvl > 8 then
        warn("[PLATFORM R$ API] Niveau invalide:", tostring(platformLevel))
        return false
    end
    local productId = PLATFORM_PRODUCT_IDS[lvl]
    if not productId or productId == 0 then
        warn("[PLATFORM R$ API] ProductId non configur√© pour le niveau:", lvl)
        return false
    end
    -- Anti-spam 1.5s
    local now = os.clock()
    local last = platformPromptCooldownByUserId[player.UserId] or 0
    if now - last < 1.5 then return false end
    platformPromptCooldownByUserId[player.UserId] = now

    pendingPlatformByUserId[player.UserId] = { level = lvl, productId = productId }
    local ok, err = pcall(function()
        MarketplaceService:PromptProductPurchase(player, productId)
    end)
    if not ok then
        warn("[PLATFORM R$ API] Erreur PromptProductPurchase:", err)
        pendingPlatformByUserId[player.UserId] = nil
        return false
    end
    return true
end

-- Essaie l'achat en monnaie; si insuffisant, prompt Robux automatiquement
function StockManager.promptPlatformAuto(player, platformLevel)
    if not player then return false end
    local lvl = tonumber(platformLevel)
    if not lvl or lvl < 1 or lvl > 8 then
        warn("[PLATFORM AUTO API] Niveau invalide:", tostring(platformLevel))
        return false
    end

    -- 1) Tentative monnaie in-game via hook global si dispo
    local purchasedWithCurrency = false
    local hasHook = _G and type(_G.TryPurchasePlatformWithCurrency) == "function"
    if hasHook then
        local okHook, res = pcall(_G.TryPurchasePlatformWithCurrency, player, lvl)
        if not okHook then
            warn("[PLATFORM AUTO API] TryPurchasePlatformWithCurrency erreur:", res)
        else
            purchasedWithCurrency = res == true
        end
    end

    if purchasedWithCurrency then
        -- Notifier le client pour MAJ UI
        local evt = ReplicatedStorage:FindFirstChild("PlatformPurchaseGranted")
        if evt and evt:IsA("RemoteEvent") then
            evt:FireClient(player, lvl)
        end
        return true
    end

    -- 2) Fallback: prompt Robux
    return StockManager.promptPlatformRobux(player, lvl)
end

-- üõí SYST√àME DE SAUVEGARDE DU RESTOCK TIMER
-- ===========================================

-- Fonction pour r√©cup√©rer les donn√©es actuelles de la boutique (pour sauvegarde)
-- üîÑ Obtenir les donn√©es de boutique pour un joueur (pour sauvegarde)
function StockManager.getShopData(player)
	local userId = type(player) == "number" and player or (player and player.UserId)
	if not userId or not playerStocks[userId] then
		return nil
	end
	
	local snapshot = {
		lastRestock = playerStocks[userId].lastRestock or os.time(),
		stockData = {}
	}
	
	-- Copier le stock actuel de chaque ingr√©dient
	for ingredientName, stock in pairs(playerStocks[userId]) do
		if ingredientName ~= "lastRestock" then
			snapshot.stockData[ingredientName] = stock
		end
	end
	
	return snapshot
end

-- üîÑ Restaurer les donn√©es de boutique pour un joueur
function StockManager.restoreShopData(player, shopData, offlineSeconds)
	local userId = type(player) == "number" and player or (player and player.UserId)
	if not userId then
		warn("üõí [RESTORE] UserId invalide")
		return
	end
	
	if not shopData then 
		warn("üõí [RESTORE] Aucune donn√©e de boutique √† restaurer pour le joueur:", userId)
		-- Initialiser un nouveau stock
		initializePlayerStock(userId)
		return 
	end
	
	print("üõí [RESTORE] Restauration boutique pour le joueur:", userId, "| Temps hors ligne:", offlineSeconds, "s")
	
	-- Initialiser le stock du joueur s'il n'existe pas
	if not playerStocks[userId] then
		playerStocks[userId] = {}
	end
	
	-- Restaurer le stock de chaque ingr√©dient
	if shopData.stockData then
		local count = 0
		for ingredientName, savedStock in pairs(shopData.stockData) do
			playerStocks[userId][ingredientName] = savedStock
			count = count + 1
		end
		print("üõí [RESTORE] Stock restaur√© pour", count, "ingr√©dients")
	end
	
	-- Calculer combien de restocks ont eu lieu pendant l'absence
	local lastRestock = shopData.lastRestock or os.time()
	local timeSinceLastRestock = os.time() - lastRestock
	local restocksOccurred = math.floor(timeSinceLastRestock / RESTOCK_INTERVAL)
	
	-- Si au moins un restock a eu lieu, restock la boutique du joueur
	if restocksOccurred > 0 then
		print("üõí [RESTORE]", restocksOccurred, "restock(s) ont eu lieu pendant l'absence - Restock de la boutique")
		restockPlayerShop(userId)
	end
	
	-- Mettre √† jour le timestamp
	playerStocks[userId].lastRestock = os.time()
	print("üõí [RESTORE] Boutique restaur√©e pour le joueur:", userId)
end

-- Exposer le StockManager dans l'espace global pour le syst√®me de sauvegarde
if game:GetService("RunService"):IsServer() then
	_G.StockManager = StockManager
	print("üõí [STOCK] StockManager expos√© dans _G pour la sauvegarde")
end

return StockManager