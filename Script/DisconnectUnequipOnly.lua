--[[
DisconnectUnequipOnly.lua - D√©s√©quipement uniquement lors de la d√©connexion
Ce script d√©s√©quipe les outils UNIQUEMENT quand le joueur se d√©connecte.
Il surveille la destruction du character pour attraper les d√©connexions plus t√¥t.

√Ä placer dans ServerScriptService
--]]

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Attendre que SaveDataManager soit charg√©
local SaveDataManager = require(ReplicatedStorage:WaitForChild("SaveDataManager"))

print("üîå [DISCONNECT-ONLY] Script de d√©s√©quipement √† la d√©connexion activ√©")

-- Table pour surveiller les joueurs
local playerConnections = {}
local playerEquippedTools = {}

-- Fonction simple pour d√©s√©quiper les outils d'un joueur
local function unequipPlayerTools(player)
    if not player or not player.Parent then 
        return false 
    end
    
    local character = player.Character
    if not character then 
        return false 
    end
    
    local backpack = player:FindFirstChildOfClass("Backpack")
    if not backpack then 
        return false 
    end
    
    local unequippedCount = 0
    local toolsToMove = {}
    
    -- Collecter tous les outils √©quip√©s
    for _, tool in pairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            table.insert(toolsToMove, tool)
            unequippedCount = unequippedCount + 1
        end
    end
    
    if unequippedCount == 0 then
        return false
    end
    
    -- D√©placer tous les outils vers le backpack
    for _, tool in pairs(toolsToMove) do
        local baseName = tool:GetAttribute("BaseName") or tool.Name
        print("üì§ [DISCONNECT-ONLY] D√©s√©quipement:", baseName)
        tool.Parent = backpack
    end
    
    print("‚úÖ [DISCONNECT-ONLY] D√©s√©quip√©", unequippedCount, "outil(s) pour", player.Name)
    
    -- Forcer une sauvegarde imm√©diate apr√®s d√©s√©quipement
    task.spawn(function()
        task.wait(0.1)
        local success = SaveDataManager.savePlayerData(player)
        if success then
            print("üíæ [DISCONNECT-ONLY] Sauvegarde post-d√©s√©quipement r√©ussie pour", player.Name)
        end
    end)
    
    return true
end

-- Surveiller chaque joueur pour d√©tecter les d√©connexions plus t√¥t
local function setupPlayerMonitoring(player)
    playerEquippedTools[player] = {}
    playerConnections[player] = {}
    
    local function onCharacterAdded(character)
        if not character then return end
        
        print("üë§ [DISCONNECT-ONLY] Surveillance character pour", player.Name)
        
        -- Surveiller les outils ajout√©s au character
        local childAddedConnection = character.ChildAdded:Connect(function(child)
            if child:IsA("Tool") then
                local baseName = child:GetAttribute("BaseName") or child.Name
                print("‚ö° [DISCONNECT-ONLY] Outil √©quip√©:", baseName, "par", player.Name)
                playerEquippedTools[player][child] = true
            end
        end)
        
        -- Surveiller les outils retir√©s du character
        local childRemovedConnection = character.ChildRemoved:Connect(function(child)
            if child:IsA("Tool") then
                local baseName = child:GetAttribute("BaseName") or child.Name
                print("‚ö° [DISCONNECT-ONLY] Outil d√©s√©quip√©:", baseName, "par", player.Name)
                playerEquippedTools[player][child] = nil
            end
        end)
        
        -- üö® CRITIQUE: Surveiller la destruction du character
        local ancestryConnection = character.AncestryChanged:Connect(function()
            if not character.Parent then
                print("üö® [DISCONNECT-ONLY] Character d√©truit pour", player.Name, "- D√©s√©quipement d'urgence!")
                
                -- Collecter tous les outils encore √©quip√©s
                local equippedTools = {}
                for tool, _ in pairs(playerEquippedTools[player] or {}) do
                    if tool and tool.Parent == character then
                        table.insert(equippedTools, tool)
                    end
                end
                
                if #equippedTools > 0 then
                    print("üö® [DISCONNECT-ONLY] URGENCE: D√©placement de", #equippedTools, "outil(s) avant destruction!")
                    local backpack = player:FindFirstChildOfClass("Backpack")
                    if backpack then
                        for _, tool in pairs(equippedTools) do
                            local baseName = tool:GetAttribute("BaseName") or tool.Name
                            print("üì§ [DISCONNECT-ONLY] Sauvetage:", baseName)
                            tool.Parent = backpack
                        end
                        
                        -- Sauvegarde imm√©diate
                        task.spawn(function()
                            task.wait(0.1)
                            SaveDataManager.savePlayerData(player)
                            print("üíæ [DISCONNECT-ONLY] Sauvegarde d'urgence termin√©e")
                        end)
                    end
                end
            end
        end)
        
        -- Stocker les connexions pour nettoyage
        playerConnections[player].childAdded = childAddedConnection
        playerConnections[player].childRemoved = childRemovedConnection
        playerConnections[player].ancestry = ancestryConnection
    end
    
    -- Surveiller le character actuel et futurs
    if player.Character then
        onCharacterAdded(player.Character)
    end
    
    local characterAddedConnection = player.CharacterAdded:Connect(onCharacterAdded)
    playerConnections[player].characterAdded = characterAddedConnection
    
    -- Surveiller aussi la d√©connexion du joueur comme fallback
    local playerAncestryConnection = player.AncestryChanged:Connect(function()
        if not player.Parent then
            print("üö® [DISCONNECT-ONLY] Joueur d√©connect√© d√©tect√©:", player.Name)
            
            -- Derni√®re chance de sauvegarder les outils √©quip√©s
            local equippedTools = {}
            for tool, _ in pairs(playerEquippedTools[player] or {}) do
                if tool and tool.Parent then
                    table.insert(equippedTools, tool)
                end
            end
            
            if #equippedTools > 0 then
                print("üîÑ [DISCONNECT-ONLY] Derni√®re chance: sauvegarde de", #equippedTools, "outil(s)")
                local backpack = player:FindFirstChildOfClass("Backpack")
                if backpack then
                    for _, tool in pairs(equippedTools) do
                        tool.Parent = backpack
                    end
                    SaveDataManager.savePlayerData(player)
                end
            end
        end
    end)
    
    playerConnections[player].playerAncestry = playerAncestryConnection
end

-- Nettoyer les connexions
local function cleanupPlayer(player)
    -- D√©connecter toutes les connexions
    if playerConnections[player] then
        for _, connection in pairs(playerConnections[player]) do
            if connection then
                connection:Disconnect()
            end
        end
    end
    
    -- Nettoyer les tables
    playerConnections[player] = nil
    playerEquippedTools[player] = nil
end

-- Gestion des connexions
Players.PlayerAdded:Connect(function(player)
    print("üëã [DISCONNECT-ONLY] Surveillance activ√©e pour", player.Name)
    setupPlayerMonitoring(player)
end)

-- D√©tecter la d√©connexion comme fallback
Players.PlayerRemoving:Connect(function(player)
    print("üëã [DISCONNECT-ONLY] PlayerRemoving d√©tect√©:", player.Name)
    
    -- Essayer le d√©s√©quipement traditionnel comme fallback
    local success = unequipPlayerTools(player)
    if success then
        print("‚úÖ [DISCONNECT-ONLY] Fallback r√©ussi pour", player.Name)
    else
        print("‚ÑπÔ∏è [DISCONNECT-ONLY] Fallback - aucun outil √† d√©s√©quiper pour", player.Name)
    end
    
    -- Nettoyer les connexions
    cleanupPlayer(player)
end)

-- G√©rer les joueurs d√©j√† connect√©s
for _, player in pairs(Players:GetPlayers()) do
    setupPlayerMonitoring(player)
end

-- Commande de test pour v√©rifier le d√©s√©quipement manuel
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        if message:lower() == "/testdisconnect" then
            print("üß™ [DISCONNECT-ONLY] Test de d√©s√©quipement pour", player.Name)
            local success = unequipPlayerTools(player)
            if success then
                print("‚úÖ [DISCONNECT-ONLY] Test r√©ussi - outils d√©s√©quip√©s")
            else
                print("‚ÑπÔ∏è [DISCONNECT-ONLY] Test - aucun outil √† d√©s√©quiper")
            end
        elseif message:lower() == "/checkequipped" then
            print("üîç [DISCONNECT-ONLY] V√©rification outils √©quip√©s pour", player.Name)
            local count = 0
            for tool, _ in pairs(playerEquippedTools[player] or {}) do
                if tool and tool.Parent then
                    count = count + 1
                    local baseName = tool:GetAttribute("BaseName") or tool.Name
                    print("  üìã", baseName, "dans", tool.Parent.Name)
                end
            end
            print("üîç [DISCONNECT-ONLY] Total:", count, "outil(s) √©quip√©(s)")
        end
    end)
end)

print("‚úÖ [DISCONNECT-ONLY] Syst√®me activ√© - d√©s√©quipement √† la d√©connexion avec surveillance avanc√©e")
print("üí° [DISCONNECT-ONLY] Commandes de test: /testdisconnect, /checkequipped")