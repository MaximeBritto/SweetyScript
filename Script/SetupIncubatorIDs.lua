--[[
    üè≠ SCRIPT HELPER: Configurer les IDs des Incubateurs
    
    Ce script ajoute automatiquement un attribut "IncubatorID" unique √† chaque incubateur
    pour permettre le tracking des bonbons cr√©√©s par chaque incubateur.
    
    UTILISATION:
    1. Colle ce script dans ServerScriptService
    2. Lance le jeu
    3. Les IDs seront configur√©s automatiquement
    4. Supprime ce script apr√®s utilisation
    
    OU utilise la fonction manuelle:
    _G.SetupIncubatorIDs()
--]]

local Workspace = game:GetService("Workspace")

-- Fonction pour trouver tous les incubateurs (via les Parcels)
local function findAllIncubators()
    local incubators = {}
    
    print("üîç [INCUBATOR-ID] Recherche des Parcels dans le Workspace...")
    
    -- Chercher tous les Parcels (Parcel_1, Parcel_2, etc.)
    for _, obj in ipairs(Workspace:GetChildren()) do
        if obj:IsA("Model") and obj.Name:match("^Parcel_") then
            print("   üì¶ Parcel trouv√©:", obj.Name)
            
            -- Chercher l'IncubatorMesh dans ce Parcel
            local incubatorMesh = obj:FindFirstChild("IncubatorMesh")
            if incubatorMesh then
                table.insert(incubators, incubatorMesh)
                print("      ‚úÖ IncubatorMesh trouv√© dans", obj.Name)
            else
                print("      ‚ö†Ô∏è Pas d'IncubatorMesh dans", obj.Name)
            end
        end
    end
    
    if #incubators == 0 then
        warn("‚ö†Ô∏è [INCUBATOR-ID] Aucun incubateur trouv√©!")
        warn("‚ö†Ô∏è [INCUBATOR-ID] V√©rifie que tes Parcels contiennent bien un 'IncubatorMesh'")
    else
        print("üè≠ [INCUBATOR-ID] Trouv√©", #incubators, "incubateur(s)")
    end
    
    return incubators
end

-- Fonction pour g√©n√©rer un ID unique bas√© sur la position de l'incubateur
local function generateIncubatorID(incubator, index)
    -- Essayer de trouver le ParcelID dans le parent (Parcel)
    local parent = incubator.Parent
    if parent then
        local parcelID = parent:FindFirstChild("ParcelID")
        if parcelID and parcelID:IsA("StringValue") and parcelID.Value ~= "" then
            return parcelID.Value
        end
        
        -- Utiliser le nom du Parcel comme ID
        if parent.Name:match("^Parcel_") then
            return parent.Name
        end
    end
    
    -- Sinon, utiliser la position de l'incubateur
    if incubator:IsA("BasePart") then
        local pos = incubator.Position
        -- Format: "Inc_X_Y_Z" (arrondi √† l'unit√©)
        return string.format("Inc_%d_%d_%d", 
            math.floor(pos.X + 0.5), 
            math.floor(pos.Y + 0.5), 
            math.floor(pos.Z + 0.5)
        )
    end
    
    -- Fallback: utiliser l'index
    return "Incubator_" .. tostring(index)
end

-- Fonction principale pour configurer tous les IDs
local function setupAllIncubatorIDs()
    print("üöÄ [INCUBATOR-ID] D√©but de la configuration des IDs...")
    
    local incubators = findAllIncubators()
    local configuredCount = 0
    local skippedCount = 0
    
    for index, incubator in ipairs(incubators) do
        -- V√©rifier si l'ID existe d√©j√†
        local existingID = incubator:GetAttribute("IncubatorID")
        
        if existingID and existingID ~= "" then
            print("‚ö†Ô∏è [INCUBATOR-ID] ID d√©j√† configur√©:", existingID)
            skippedCount = skippedCount + 1
        else
            -- G√©n√©rer et assigner un nouvel ID
            local newID = generateIncubatorID(incubator, index)
            incubator:SetAttribute("IncubatorID", newID)
            print("‚úÖ [INCUBATOR-ID] ID configur√©:", newID)
            configuredCount = configuredCount + 1
        end
    end
    
    print("üèÅ [INCUBATOR-ID] Termin√©!")
    print("   ‚úÖ Configur√©s:", configuredCount)
    print("   ‚ö†Ô∏è Ignor√©s:", skippedCount)
    print("   üìä Total incubateurs:", #incubators)
    
    return configuredCount, skippedCount
end

-- Fonction pour lister tous les IDs d'incubateurs
local function listAllIncubatorIDs()
    print("üìã [INCUBATOR-ID] Liste des IDs d'incubateurs:")
    
    local incubators = findAllIncubators()
    local idsFound = {}
    
    for _, incubator in ipairs(incubators) do
        local id = incubator:GetAttribute("IncubatorID")
        if id then
            table.insert(idsFound, id)
            print("   üè≠", id)
        else
            print("   ‚ö†Ô∏è Incubateur sans ID √†", incubator:GetPivot().Position)
        end
    end
    
    print("üìä Total IDs trouv√©s:", #idsFound)
    return idsFound
end

-- Fonction pour r√©initialiser tous les IDs (utile pour reset)
local function resetAllIncubatorIDs()
    print("üóëÔ∏è [INCUBATOR-ID] R√©initialisation de tous les IDs...")
    
    local incubators = findAllIncubators()
    local resetCount = 0
    
    for _, incubator in ipairs(incubators) do
        local existingID = incubator:GetAttribute("IncubatorID")
        if existingID then
            incubator:SetAttribute("IncubatorID", nil)
            resetCount = resetCount + 1
        end
    end
    
    print("‚úÖ [INCUBATOR-ID] R√©initialis√©", resetCount, "ID(s)")
    return resetCount
end

-- Fonction pour v√©rifier les doublons d'IDs
local function checkForDuplicateIDs()
    print("üîç [INCUBATOR-ID] V√©rification des doublons...")
    
    local incubators = findAllIncubators()
    local idCounts = {}
    local duplicates = {}
    
    for _, incubator in ipairs(incubators) do
        local id = incubator:GetAttribute("IncubatorID")
        if id then
            idCounts[id] = (idCounts[id] or 0) + 1
            if idCounts[id] > 1 then
                table.insert(duplicates, id)
            end
        end
    end
    
    if #duplicates > 0 then
        warn("‚ö†Ô∏è [INCUBATOR-ID] Doublons d√©tect√©s:")
        for _, id in ipairs(duplicates) do
            warn("   ‚ùå", id, "utilis√©", idCounts[id], "fois")
        end
        return false
    else
        print("‚úÖ [INCUBATOR-ID] Aucun doublon d√©tect√©")
        return true
    end
end

-- Exposer les fonctions globalement pour utilisation manuelle
_G.SetupIncubatorIDs = setupAllIncubatorIDs
_G.ListIncubatorIDs = listAllIncubatorIDs
_G.ResetIncubatorIDs = resetAllIncubatorIDs
_G.CheckDuplicateIncubatorIDs = checkForDuplicateIDs

-- Ex√©cution automatique au d√©marrage
print("üè≠ [INCUBATOR-ID] Script charg√©!")
print("üìù Commandes disponibles:")
print("   _G.SetupIncubatorIDs()           - Configurer les IDs des incubateurs")
print("   _G.ListIncubatorIDs()            - Lister tous les IDs")
print("   _G.ResetIncubatorIDs()           - R√©initialiser tous les IDs")
print("   _G.CheckDuplicateIncubatorIDs()  - V√©rifier les doublons")

-- üöÄ Ex√©cution automatique apr√®s 5 secondes
task.wait(5)
print("üöÄ [INCUBATOR-ID] D√©marrage automatique de la configuration...")
setupAllIncubatorIDs()
task.wait(1)
checkForDuplicateIDs()
