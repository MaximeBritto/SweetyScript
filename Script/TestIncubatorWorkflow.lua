-- Script de test pour v√©rifier le workflow complet de l'incubateur
-- √Ä placer dans ServerScriptService pour tester

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

print("üß™ [TEST] Script de test du workflow incubateur - D√©marrage")

-- V√©rifier que tous les RemoteEvents existent
local requiredRemotes = {
    -- RemoteEvents
    "OpenIncubatorMenu",
    "PlaceIngredientInSlot", 
    "RemoveIngredientFromSlot",
    "StartCrafting",
    "IncubatorCraftProgress",
    "PickupCandyEvent",
    "AchatIngredientEvent_V2",
    "OuvrirMenuEvent",
    -- RemoteFunctions
    "GetIncubatorSlots"
}

print("üîç [TEST] V√©rification des RemoteEvents...")
local allFound = true
for _, remoteName in ipairs(requiredRemotes) do
    local remote = ReplicatedStorage:FindFirstChild(remoteName)
    if remote then
        print("‚úÖ [TEST]", remoteName, ":", remote.ClassName)
    else
        print("‚ùå [TEST]", remoteName, ": MANQUANT!")
        allFound = false
    end
end

if allFound then
    print("üéâ [TEST] Tous les RemoteEvents requis sont pr√©sents!")
else
    print("‚ö†Ô∏è [TEST] Certains RemoteEvents manquent - ex√©cuter CreateRemoteEvents.lua")
end

-- V√©rifier RecipeManager
print("üîç [TEST] V√©rification du RecipeManager...")
local recipeManager = ReplicatedStorage:FindFirstChild("RecipeManager")
if recipeManager and recipeManager:IsA("ModuleScript") then
    local success, module = pcall(require, recipeManager)
    if success and module then
        print("‚úÖ [TEST] RecipeManager charg√©:")
        if module.Ingredients then
            local ingredientCount = 0
            for name, _ in pairs(module.Ingredients) do
                ingredientCount = ingredientCount + 1
            end
            print("  - Ingr√©dients:", ingredientCount)
        end
        if module.Recettes then
            local recipeCount = 0
            for name, recipe in pairs(module.Recettes) do
                recipeCount = recipeCount + 1
                -- V√©rifier quelques recettes de base
                if name == "Basique" or name == "Basique Gelatine" then
                    print("  - Recette", name, ":")
                    if recipe.ingredients then
                        for ingredient, qty in pairs(recipe.ingredients) do
                            print("    -", ingredient, ":", qty)
                        end
                    end
                end
            end
            print("  - Recettes:", recipeCount)
        end
    else
        print("‚ùå [TEST] Erreur lors du chargement de RecipeManager:", module)
    end
else
    print("‚ùå [TEST] RecipeManager non trouv√©!")
end

-- Test de correspondance des noms d'ingr√©dients
print("üîç [TEST] Test de correspondance des noms d'ingr√©dients...")
if recipeManager then
    local success, module = pcall(require, recipeManager)
    if success and module and module.Ingredients and module.Recettes then
        -- V√©rifier que tous les ingr√©dients utilis√©s dans les recettes existent
        local invalidIngredients = {}
        for recipeName, recipe in pairs(module.Recettes) do
            if recipe.ingredients then
                for ingredient, qty in pairs(recipe.ingredients) do
                    -- Convertir en format attendu (premi√®re lettre majuscule)
                    local expectedName = ingredient:gsub("^%l", string.upper)
                    if not module.Ingredients[expectedName] then
                        if not invalidIngredients[ingredient] then
                            invalidIngredients[ingredient] = {}
                        end
                        table.insert(invalidIngredients[ingredient], recipeName)
                    end
                end
            end
        end
        
        if next(invalidIngredients) then
            print("‚ö†Ô∏è [TEST] Ingr√©dients invalides trouv√©s dans les recettes:")
            for ingredient, recipes in pairs(invalidIngredients) do
                print("  -", ingredient, "utilis√© dans:", table.concat(recipes, ", "))
            end
        else
            print("‚úÖ [TEST] Tous les ingr√©dients des recettes sont valides!")
        end
    end
end

print("üß™ [TEST] Tests de base termin√©s - Testez maintenant en jeu:")
print("1. Ouvrir le menu d'achat d'ingr√©dients")
print("2. Acheter du Sucre et de la Gelatine") 
print("3. Cliquer sur un incubateur pour ouvrir le menu")
print("4. Placer Sucre dans slot 1, Gelatine dans slot 2")
print("5. V√©rifier qu'une recette 'Basique Gelatine' appara√Æt")
print("6. Cliquer sur le slot de sortie pour d√©marrer la production")



